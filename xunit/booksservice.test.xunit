booksservice_test_suite:
    create_test_suite:
        valid_parameters_creates_isbn:
            fixture:
                ISBN_PREFIX = 'Test-ISBN'
                isbngenerator = RandomIsbnGenerator(ISBN_PREFIX, '-is') # Erzeugt ISBNs mit Zufallszahlen
                storeservice = Dummy()
                booksservice = BooksService(isbngenerator, storeservice) # So wird CDI entscheiden, was für ein BooksService genommen wird
            title='Testing'
            pages=100
            price=19.99
            isbn=create(title, pages, price)
            assert_notnull(isbn)
            assert_true(isbn.starts_with(ISBN_PREFIX) )

        invalid_title_signals_error:
            fixture:
                isbngenerator = Dummy()
                storeservice = Dummy()
                booksservice = BooksService(isbngenerator, store_service) # So wird CDI entscheiden, was für ein BooksService genommen wird
            title=None
            pages=100
            price=19.99
            result=create(title, pages, price)
            assert_failure(result)

    find_by_isbn_test_suite:
        valid_isbn_finds_book:
            fixture:
                isbngenerator = Dummy()
                storeservice = MapStoreService() # Hält eine In-Memory-Implementierung eines Stores
                booksservice = BooksService(isbngenerator, store_service) # So wird CDI entscheiden, was für ein BooksService genommen wird
            isbn='ISBN-1-dk'
            result=find_by_isbn(isbn)
            # ich finde leider keine gültige assertion...
        valid_isbn_finds_book_if_book_is_created:
            fixture:
                isbngenerator = Dummy()
                storeservice = Dummy()
                booksservice = BooksService(isbngenerator, store_service) # So wird CDI entscheiden, was für ein BooksService genommen wird
            title='Testing'
            pages=100
            price=19.99
            isbn=create(title, pages, price)
            book=find_by_isbn(isbn)
            assert_notnull(book)

    find_all_test_suite:
        fixture:
            isbngenerator = Dummy()
            storeservice = Dummy()
            booksservice = BooksService(isbngenerator, store_service) # So wird CDI entscheiden, was für ein BooksService genommen wird
        #TODO
    update_test_suite:
        fixture:
            isbngenerator = Dummy()
            storeservice = Dummy()
            booksservice = BooksService(isbngenerator, store_service) # So wird CDI entscheiden, was für ein BooksService genommen wird
        #TODO
    delete_by_isbn_test_suite:
        fixture:
            isbngenerator = Dummy()
            storeservice = Dummy()
            booksservice = BooksService(isbngenerator, store_service) # So wird CDI entscheiden, was für ein BooksService genommen wird
        #TODO

    